User Objects:
  -Def user primary attrbutes:
      *username
      *password
      *email
      *first_name
      *last_name

Creating users->
  USE THE create_user() helper function
--------------
  >>> from django.contrib.auth.models import User
  >>> user = User.objects.create_user('john',
              'lennon@thebeatles.com', 'johnpassword')

  # At this point, user is a User object that has already been saved
  # to the database. You can continue to change its attributes
  # if you want to change other fields.
  >>> user.last_name = 'Lennon'
  >>> user.save()

-----------------

Creating superusers
  WE CAN BUT I DONT SEE THE POINT

----------------
Changing passwords
  Django is gud. Uses hash. Because of this DO NOT ATTEMPT to
  manipulate password attribute direct. To change you can....
  use manage.py commands but we will use programmatically ->

  >>> from django.contrib.auth.models import User
  >>> u = User.objects.get(username='john')
  >>> u.set_password('new password')
  >>> u.save()

Changing a userâ€™s password will log out all their sessions if
the SessionAuthenticationMiddleware is enabled. See
https://docs.djangoproject.com/en/1.9/topics/auth/default/#session-invalidation-on-password-change
for details.
-----------------

Authenticate:
  use authenticate() to authenticate a given username and password

-----------------
Permissions and Authorization

  Django comes with ez permissions system. Can give permissions to
  specific users and groups of users.

  User objects have two many-to-many fields: groups and user_permissions.
  User objects can access their related objects in the same way
  as any other Django model:

  GROUPS:
    django.contrib.auth.models.Group models are a generic way of categorizing
    users so you can apply permissions, or some other label, to those users.
    A user can belong to any number of groups.
-----

Logging users in:

  login(request, user) -> saves user's id in the session using Django's
  session framework.
